// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package hyperbahn

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - Message
//  - ServiceName
type NoPeersAvailable struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
  ServiceName string `thrift:"serviceName,2,required" db:"serviceName" json:"serviceName"`
}

func NewNoPeersAvailable() *NoPeersAvailable {
  return &NoPeersAvailable{}
}


func (p *NoPeersAvailable) GetMessage() string {
  return p.Message
}

func (p *NoPeersAvailable) GetServiceName() string {
  return p.ServiceName
}
func (p *NoPeersAvailable) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;
  var issetServiceName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMessage = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetServiceName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  if !issetServiceName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"));
  }
  return nil
}

func (p *NoPeersAvailable)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *NoPeersAvailable)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *NoPeersAvailable) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NoPeersAvailable"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoPeersAvailable) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *NoPeersAvailable) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceName: ", p), err) }
  return err
}

func (p *NoPeersAvailable) Equals(other *NoPeersAvailable) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  if p.ServiceName != other.ServiceName { return false }
  return true
}

func (p *NoPeersAvailable) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoPeersAvailable(%+v)", *p)
}

func (p *NoPeersAvailable) Error() string {
  return p.String()
}

func (NoPeersAvailable) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*NoPeersAvailable)(nil)

// Attributes:
//  - Message
//  - ServiceName
type InvalidServiceName struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
  ServiceName string `thrift:"serviceName,2,required" db:"serviceName" json:"serviceName"`
}

func NewInvalidServiceName() *InvalidServiceName {
  return &InvalidServiceName{}
}


func (p *InvalidServiceName) GetMessage() string {
  return p.Message
}

func (p *InvalidServiceName) GetServiceName() string {
  return p.ServiceName
}
func (p *InvalidServiceName) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;
  var issetServiceName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMessage = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetServiceName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  if !issetServiceName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"));
  }
  return nil
}

func (p *InvalidServiceName)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidServiceName)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *InvalidServiceName) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InvalidServiceName"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidServiceName) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidServiceName) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceName: ", p), err) }
  return err
}

func (p *InvalidServiceName) Equals(other *InvalidServiceName) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  if p.ServiceName != other.ServiceName { return false }
  return true
}

func (p *InvalidServiceName) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidServiceName(%+v)", *p)
}

func (p *InvalidServiceName) Error() string {
  return p.String()
}

func (InvalidServiceName) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*InvalidServiceName)(nil)

// Attributes:
//  - ServiceName
type DiscoveryQuery struct {
  ServiceName string `thrift:"serviceName,1,required" db:"serviceName" json:"serviceName"`
}

func NewDiscoveryQuery() *DiscoveryQuery {
  return &DiscoveryQuery{}
}


func (p *DiscoveryQuery) GetServiceName() string {
  return p.ServiceName
}
func (p *DiscoveryQuery) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetServiceName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetServiceName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetServiceName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"));
  }
  return nil
}

func (p *DiscoveryQuery)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *DiscoveryQuery) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DiscoveryQuery"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DiscoveryQuery) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err) }
  return err
}

func (p *DiscoveryQuery) Equals(other *DiscoveryQuery) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ServiceName != other.ServiceName { return false }
  return true
}

func (p *DiscoveryQuery) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DiscoveryQuery(%+v)", *p)
}

// Attributes:
//  - Ipv4
type IpAddress struct {
  Ipv4 *int32 `thrift:"ipv4,1" db:"ipv4" json:"ipv4,omitempty"`
}

func NewIpAddress() *IpAddress {
  return &IpAddress{}
}

var IpAddress_Ipv4_DEFAULT int32
func (p *IpAddress) GetIpv4() int32 {
  if !p.IsSetIpv4() {
    return IpAddress_Ipv4_DEFAULT
  }
return *p.Ipv4
}
func (p *IpAddress) CountSetFieldsIpAddress() int {
  count := 0
  if (p.IsSetIpv4()) {
    count++
  }
  return count

}

func (p *IpAddress) IsSetIpv4() bool {
  return p.Ipv4 != nil
}

func (p *IpAddress) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IpAddress)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Ipv4 = &v
}
  return nil
}

func (p *IpAddress) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsIpAddress(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "IpAddress"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IpAddress) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIpv4() {
    if err := oprot.WriteFieldBegin(ctx, "ipv4", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ipv4: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Ipv4)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ipv4 (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ipv4: ", p), err) }
  }
  return err
}

func (p *IpAddress) Equals(other *IpAddress) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ipv4 != other.Ipv4 {
    if p.Ipv4 == nil || other.Ipv4 == nil {
      return false
    }
    if (*p.Ipv4) != (*other.Ipv4) { return false }
  }
  return true
}

func (p *IpAddress) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IpAddress(%+v)", *p)
}

// Attributes:
//  - IP
//  - Port
type ServicePeer struct {
  IP *IpAddress `thrift:"ip,1,required" db:"ip" json:"ip"`
  Port int32 `thrift:"port,2,required" db:"port" json:"port"`
}

func NewServicePeer() *ServicePeer {
  return &ServicePeer{}
}

var ServicePeer_IP_DEFAULT *IpAddress
func (p *ServicePeer) GetIP() *IpAddress {
  if !p.IsSetIP() {
    return ServicePeer_IP_DEFAULT
  }
return p.IP
}

func (p *ServicePeer) GetPort() int32 {
  return p.Port
}
func (p *ServicePeer) IsSetIP() bool {
  return p.IP != nil
}

func (p *ServicePeer) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIP bool = false;
  var issetPort bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetIP = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetPort = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIP{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IP is not set"));
  }
  if !issetPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"));
  }
  return nil
}

func (p *ServicePeer)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.IP = &IpAddress{}
  if err := p.IP.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
  }
  return nil
}

func (p *ServicePeer)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *ServicePeer) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ServicePeer"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServicePeer) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ip", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err) }
  if err := p.IP.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err) }
  return err
}

func (p *ServicePeer) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *ServicePeer) Equals(other *ServicePeer) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.IP.Equals(other.IP) { return false }
  if p.Port != other.Port { return false }
  return true
}

func (p *ServicePeer) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServicePeer(%+v)", *p)
}

// Attributes:
//  - Peers
type DiscoveryResult_ struct {
  Peers []*ServicePeer `thrift:"peers,1,required" db:"peers" json:"peers"`
}

func NewDiscoveryResult_() *DiscoveryResult_ {
  return &DiscoveryResult_{}
}


func (p *DiscoveryResult_) GetPeers() []*ServicePeer {
  return p.Peers
}
func (p *DiscoveryResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPeers bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPeers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPeers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Peers is not set"));
  }
  return nil
}

func (p *DiscoveryResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ServicePeer, 0, size)
  p.Peers =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &ServicePeer{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Peers = append(p.Peers, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DiscoveryResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DiscoveryResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DiscoveryResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "peers", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:peers: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Peers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Peers {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:peers: ", p), err) }
  return err
}

func (p *DiscoveryResult_) Equals(other *DiscoveryResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Peers) != len(other.Peers) { return false }
  for i, _tgt := range p.Peers {
    _src1 := other.Peers[i]
    if !_tgt.Equals(_src1) { return false }
  }
  return true
}

func (p *DiscoveryResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DiscoveryResult_(%+v)", *p)
}

type Hyperbahn interface {
  // Parameters:
  //  - Query
  Discover(ctx context.Context, query *DiscoveryQuery) (_r *DiscoveryResult_, _err error)
}

type HyperbahnClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewHyperbahnClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HyperbahnClient {
  return &HyperbahnClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewHyperbahnClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HyperbahnClient {
  return &HyperbahnClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewHyperbahnClient(c thrift.TClient) *HyperbahnClient {
  return &HyperbahnClient{
    c: c,
  }
}

func (p *HyperbahnClient) Client_() thrift.TClient {
  return p.c
}

func (p *HyperbahnClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *HyperbahnClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Query
func (p *HyperbahnClient) Discover(ctx context.Context, query *DiscoveryQuery) (_r *DiscoveryResult_, _err error) {
  var _args2 HyperbahnDiscoverArgs
  _args2.Query = query
  var _result4 HyperbahnDiscoverResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "discover", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  switch {
  case _result4.NoPeersAvailable!= nil:
    return _r, _result4.NoPeersAvailable
  case _result4.InvalidServiceName!= nil:
    return _r, _result4.InvalidServiceName
  }

  if _ret5 := _result4.GetSuccess(); _ret5 != nil {
    return _ret5, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "discover failed: unknown result")
}

type HyperbahnProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Hyperbahn
}

func (p *HyperbahnProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *HyperbahnProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *HyperbahnProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewHyperbahnProcessor(handler Hyperbahn) *HyperbahnProcessor {

  self6 := &HyperbahnProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["discover"] = &hyperbahnProcessorDiscover{handler:handler}
return self6
}

func (p *HyperbahnProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x7.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x7

}

type hyperbahnProcessorDiscover struct {
  handler Hyperbahn
}

func (p *hyperbahnProcessorDiscover) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err8 error
  args := HyperbahnDiscoverArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "discover", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := HyperbahnDiscoverResult{}
  if retval, err2 := p.handler.Discover(ctx, args.Query); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *NoPeersAvailable:
      result.NoPeersAvailable = v
    case *InvalidServiceName:
      result.InvalidServiceName = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc9 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing discover: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "discover", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err8 = thrift.WrapTException(err2)
      }
      if err2 := _exc9.Write(ctx, oprot); _write_err8 == nil && err2 != nil {
        _write_err8 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err8 == nil && err2 != nil {
        _write_err8 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err8 == nil && err2 != nil {
        _write_err8 = thrift.WrapTException(err2)
      }
      if _write_err8 != nil {
        return false, thrift.WrapTException(_write_err8)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "discover", thrift.REPLY, seqId); err2 != nil {
    _write_err8 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err8 == nil && err2 != nil {
    _write_err8 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err8 == nil && err2 != nil {
    _write_err8 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err8 == nil && err2 != nil {
    _write_err8 = thrift.WrapTException(err2)
  }
  if _write_err8 != nil {
    return false, thrift.WrapTException(_write_err8)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Query
type HyperbahnDiscoverArgs struct {
  Query *DiscoveryQuery `thrift:"query,1,required" db:"query" json:"query"`
}

func NewHyperbahnDiscoverArgs() *HyperbahnDiscoverArgs {
  return &HyperbahnDiscoverArgs{}
}

var HyperbahnDiscoverArgs_Query_DEFAULT *DiscoveryQuery
func (p *HyperbahnDiscoverArgs) GetQuery() *DiscoveryQuery {
  if !p.IsSetQuery() {
    return HyperbahnDiscoverArgs_Query_DEFAULT
  }
return p.Query
}
func (p *HyperbahnDiscoverArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *HyperbahnDiscoverArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetQuery bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetQuery = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetQuery{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Query is not set"));
  }
  return nil
}

func (p *HyperbahnDiscoverArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Query = &DiscoveryQuery{}
  if err := p.Query.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *HyperbahnDiscoverArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "discover_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HyperbahnDiscoverArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := p.Query.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *HyperbahnDiscoverArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HyperbahnDiscoverArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - NoPeersAvailable
//  - InvalidServiceName
type HyperbahnDiscoverResult struct {
  Success *DiscoveryResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  NoPeersAvailable *NoPeersAvailable `thrift:"noPeersAvailable,1" db:"noPeersAvailable" json:"noPeersAvailable,omitempty"`
  InvalidServiceName *InvalidServiceName `thrift:"invalidServiceName,2" db:"invalidServiceName" json:"invalidServiceName,omitempty"`
}

func NewHyperbahnDiscoverResult() *HyperbahnDiscoverResult {
  return &HyperbahnDiscoverResult{}
}

var HyperbahnDiscoverResult_Success_DEFAULT *DiscoveryResult_
func (p *HyperbahnDiscoverResult) GetSuccess() *DiscoveryResult_ {
  if !p.IsSetSuccess() {
    return HyperbahnDiscoverResult_Success_DEFAULT
  }
return p.Success
}
var HyperbahnDiscoverResult_NoPeersAvailable_DEFAULT *NoPeersAvailable
func (p *HyperbahnDiscoverResult) GetNoPeersAvailable() *NoPeersAvailable {
  if !p.IsSetNoPeersAvailable() {
    return HyperbahnDiscoverResult_NoPeersAvailable_DEFAULT
  }
return p.NoPeersAvailable
}
var HyperbahnDiscoverResult_InvalidServiceName_DEFAULT *InvalidServiceName
func (p *HyperbahnDiscoverResult) GetInvalidServiceName() *InvalidServiceName {
  if !p.IsSetInvalidServiceName() {
    return HyperbahnDiscoverResult_InvalidServiceName_DEFAULT
  }
return p.InvalidServiceName
}
func (p *HyperbahnDiscoverResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HyperbahnDiscoverResult) IsSetNoPeersAvailable() bool {
  return p.NoPeersAvailable != nil
}

func (p *HyperbahnDiscoverResult) IsSetInvalidServiceName() bool {
  return p.InvalidServiceName != nil
}

func (p *HyperbahnDiscoverResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HyperbahnDiscoverResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DiscoveryResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *HyperbahnDiscoverResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.NoPeersAvailable = &NoPeersAvailable{}
  if err := p.NoPeersAvailable.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NoPeersAvailable), err)
  }
  return nil
}

func (p *HyperbahnDiscoverResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.InvalidServiceName = &InvalidServiceName{}
  if err := p.InvalidServiceName.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InvalidServiceName), err)
  }
  return nil
}

func (p *HyperbahnDiscoverResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "discover_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HyperbahnDiscoverResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HyperbahnDiscoverResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNoPeersAvailable() {
    if err := oprot.WriteFieldBegin(ctx, "noPeersAvailable", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:noPeersAvailable: ", p), err) }
    if err := p.NoPeersAvailable.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NoPeersAvailable), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:noPeersAvailable: ", p), err) }
  }
  return err
}

func (p *HyperbahnDiscoverResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetInvalidServiceName() {
    if err := oprot.WriteFieldBegin(ctx, "invalidServiceName", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:invalidServiceName: ", p), err) }
    if err := p.InvalidServiceName.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InvalidServiceName), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:invalidServiceName: ", p), err) }
  }
  return err
}

func (p *HyperbahnDiscoverResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HyperbahnDiscoverResult(%+v)", *p)
}


