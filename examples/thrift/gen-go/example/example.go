// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package example

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - Healthy
//  - Msg
type HealthCheckRes struct {
  Healthy bool `thrift:"healthy,1" db:"healthy" json:"healthy"`
  Msg string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewHealthCheckRes() *HealthCheckRes {
  return &HealthCheckRes{}
}


func (p *HealthCheckRes) GetHealthy() bool {
  return p.Healthy
}

func (p *HealthCheckRes) GetMsg() string {
  return p.Msg
}
func (p *HealthCheckRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HealthCheckRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Healthy = v
}
  return nil
}

func (p *HealthCheckRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *HealthCheckRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HealthCheckRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HealthCheckRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "healthy", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:healthy: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Healthy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.healthy (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:healthy: ", p), err) }
  return err
}

func (p *HealthCheckRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err) }
  return err
}

func (p *HealthCheckRes) Equals(other *HealthCheckRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Healthy != other.Healthy { return false }
  if p.Msg != other.Msg { return false }
  return true
}

func (p *HealthCheckRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HealthCheckRes(%+v)", *p)
}

type Base interface {
  BaseCall(ctx context.Context) (_err error)
}

type BaseClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewBaseClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BaseClient {
  return &BaseClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBaseClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BaseClient {
  return &BaseClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBaseClient(c thrift.TClient) *BaseClient {
  return &BaseClient{
    c: c,
  }
}

func (p *BaseClient) Client_() thrift.TClient {
  return p.c
}

func (p *BaseClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *BaseClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

func (p *BaseClient) BaseCall(ctx context.Context) (_err error) {
  var _args0 BaseBaseCallArgs
  var _result2 BaseBaseCallResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "BaseCall", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  return nil
}

type BaseProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Base
}

func (p *BaseProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BaseProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BaseProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBaseProcessor(handler Base) *BaseProcessor {

  self3 := &BaseProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self3.processorMap["BaseCall"] = &baseProcessorBaseCall{handler:handler}
return self3
}

func (p *BaseProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x4.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x4

}

type baseProcessorBaseCall struct {
  handler Base
}

func (p *baseProcessorBaseCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err5 error
  args := BaseBaseCallArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "BaseCall", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BaseBaseCallResult{}
  if err2 := p.handler.BaseCall(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc6 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BaseCall: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "BaseCall", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err5 = thrift.WrapTException(err2)
    }
    if err2 := _exc6.Write(ctx, oprot); _write_err5 == nil && err2 != nil {
      _write_err5 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err5 == nil && err2 != nil {
      _write_err5 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err5 == nil && err2 != nil {
      _write_err5 = thrift.WrapTException(err2)
    }
    if _write_err5 != nil {
      return false, thrift.WrapTException(_write_err5)
    }
    return true, err
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "BaseCall", thrift.REPLY, seqId); err2 != nil {
    _write_err5 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err5 == nil && err2 != nil {
    _write_err5 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err5 == nil && err2 != nil {
    _write_err5 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err5 == nil && err2 != nil {
    _write_err5 = thrift.WrapTException(err2)
  }
  if _write_err5 != nil {
    return false, thrift.WrapTException(_write_err5)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type BaseBaseCallArgs struct {
}

func NewBaseBaseCallArgs() *BaseBaseCallArgs {
  return &BaseBaseCallArgs{}
}

func (p *BaseBaseCallArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseBaseCallArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BaseCall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseBaseCallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseBaseCallArgs(%+v)", *p)
}

type BaseBaseCallResult struct {
}

func NewBaseBaseCallResult() *BaseBaseCallResult {
  return &BaseBaseCallResult{}
}

func (p *BaseBaseCallResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseBaseCallResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BaseCall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseBaseCallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseBaseCallResult(%+v)", *p)
}


type First interface {
Base

  // Parameters:
  //  - Msg
  Echo(ctx context.Context, msg string) (_r string, _err error)
  Healthcheck(ctx context.Context) (_r *HealthCheckRes, _err error)
  AppError(ctx context.Context) (_err error)
}

type FirstClient struct {
  *BaseClient
}

func NewFirstClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FirstClient {
  return &FirstClient{BaseClient: NewBaseClientFactory(t, f)}}

func NewFirstClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FirstClient {
  return &FirstClient{BaseClient: NewBaseClientProtocol(t, iprot, oprot)}
}

func NewFirstClient(c thrift.TClient) *FirstClient {
  return &FirstClient{
    BaseClient: NewBaseClient(c),
  }
}

// Parameters:
//  - Msg
func (p *FirstClient) Echo(ctx context.Context, msg string) (_r string, _err error) {
  var _args7 FirstEchoArgs
  _args7.Msg = msg
  var _result9 FirstEchoResult
  var _meta8 thrift.ResponseMeta
  _meta8, _err = p.Client_().Call(ctx, "Echo", &_args7, &_result9)
  p.SetLastResponseMeta_(_meta8)
  if _err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

func (p *FirstClient) Healthcheck(ctx context.Context) (_r *HealthCheckRes, _err error) {
  var _args10 FirstHealthcheckArgs
  var _result12 FirstHealthcheckResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "Healthcheck", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  if _ret13 := _result12.GetSuccess(); _ret13 != nil {
    return _ret13, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Healthcheck failed: unknown result")
}

func (p *FirstClient) AppError(ctx context.Context) (_err error) {
  var _args14 FirstAppErrorArgs
  var _result16 FirstAppErrorResult
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "AppError", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  return nil
}

type FirstProcessor struct {
  *BaseProcessor
}

func NewFirstProcessor(handler First) *FirstProcessor {
  self17 := &FirstProcessor{NewBaseProcessor(handler)}
  self17.AddToProcessorMap("Echo", &firstProcessorEcho{handler:handler})
  self17.AddToProcessorMap("Healthcheck", &firstProcessorHealthcheck{handler:handler})
  self17.AddToProcessorMap("AppError", &firstProcessorAppError{handler:handler})
  return self17
}

type firstProcessorEcho struct {
  handler First
}

func (p *firstProcessorEcho) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err18 error
  args := FirstEchoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Echo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := FirstEchoResult{}
  if retval, err2 := p.handler.Echo(ctx, args.Msg); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc19 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Echo: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Echo", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if err2 := _exc19.Write(ctx, oprot); _write_err18 == nil && err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err18 == nil && err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err18 == nil && err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if _write_err18 != nil {
      return false, thrift.WrapTException(_write_err18)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Echo", thrift.REPLY, seqId); err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err18 == nil && err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err18 == nil && err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err18 == nil && err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if _write_err18 != nil {
    return false, thrift.WrapTException(_write_err18)
  }
  return true, err
}

type firstProcessorHealthcheck struct {
  handler First
}

func (p *firstProcessorHealthcheck) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err20 error
  args := FirstHealthcheckArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Healthcheck", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := FirstHealthcheckResult{}
  if retval, err2 := p.handler.Healthcheck(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc21 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Healthcheck: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Healthcheck", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if err2 := _exc21.Write(ctx, oprot); _write_err20 == nil && err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err20 == nil && err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err20 == nil && err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if _write_err20 != nil {
      return false, thrift.WrapTException(_write_err20)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Healthcheck", thrift.REPLY, seqId); err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err20 == nil && err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err20 == nil && err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err20 == nil && err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if _write_err20 != nil {
    return false, thrift.WrapTException(_write_err20)
  }
  return true, err
}

type firstProcessorAppError struct {
  handler First
}

func (p *firstProcessorAppError) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err22 error
  args := FirstAppErrorArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "AppError", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := FirstAppErrorResult{}
  if err2 := p.handler.AppError(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc23 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AppError: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "AppError", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err22 = thrift.WrapTException(err2)
    }
    if err2 := _exc23.Write(ctx, oprot); _write_err22 == nil && err2 != nil {
      _write_err22 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err22 == nil && err2 != nil {
      _write_err22 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err22 == nil && err2 != nil {
      _write_err22 = thrift.WrapTException(err2)
    }
    if _write_err22 != nil {
      return false, thrift.WrapTException(_write_err22)
    }
    return true, err
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "AppError", thrift.REPLY, seqId); err2 != nil {
    _write_err22 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err22 == nil && err2 != nil {
    _write_err22 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err22 == nil && err2 != nil {
    _write_err22 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err22 == nil && err2 != nil {
    _write_err22 = thrift.WrapTException(err2)
  }
  if _write_err22 != nil {
    return false, thrift.WrapTException(_write_err22)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Msg
type FirstEchoArgs struct {
  Msg string `thrift:"msg,1" db:"msg" json:"msg"`
}

func NewFirstEchoArgs() *FirstEchoArgs {
  return &FirstEchoArgs{}
}


func (p *FirstEchoArgs) GetMsg() string {
  return p.Msg
}
func (p *FirstEchoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FirstEchoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *FirstEchoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Echo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FirstEchoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err) }
  return err
}

func (p *FirstEchoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FirstEchoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FirstEchoResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFirstEchoResult() *FirstEchoResult {
  return &FirstEchoResult{}
}

var FirstEchoResult_Success_DEFAULT string
func (p *FirstEchoResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return FirstEchoResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FirstEchoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FirstEchoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FirstEchoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FirstEchoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Echo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FirstEchoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FirstEchoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FirstEchoResult(%+v)", *p)
}

type FirstHealthcheckArgs struct {
}

func NewFirstHealthcheckArgs() *FirstHealthcheckArgs {
  return &FirstHealthcheckArgs{}
}

func (p *FirstHealthcheckArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FirstHealthcheckArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Healthcheck_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FirstHealthcheckArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FirstHealthcheckArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FirstHealthcheckResult struct {
  Success *HealthCheckRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFirstHealthcheckResult() *FirstHealthcheckResult {
  return &FirstHealthcheckResult{}
}

var FirstHealthcheckResult_Success_DEFAULT *HealthCheckRes
func (p *FirstHealthcheckResult) GetSuccess() *HealthCheckRes {
  if !p.IsSetSuccess() {
    return FirstHealthcheckResult_Success_DEFAULT
  }
return p.Success
}
func (p *FirstHealthcheckResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FirstHealthcheckResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FirstHealthcheckResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &HealthCheckRes{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FirstHealthcheckResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Healthcheck_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FirstHealthcheckResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FirstHealthcheckResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FirstHealthcheckResult(%+v)", *p)
}

type FirstAppErrorArgs struct {
}

func NewFirstAppErrorArgs() *FirstAppErrorArgs {
  return &FirstAppErrorArgs{}
}

func (p *FirstAppErrorArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FirstAppErrorArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AppError_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FirstAppErrorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FirstAppErrorArgs(%+v)", *p)
}

type FirstAppErrorResult struct {
}

func NewFirstAppErrorResult() *FirstAppErrorResult {
  return &FirstAppErrorResult{}
}

func (p *FirstAppErrorResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FirstAppErrorResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AppError_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FirstAppErrorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FirstAppErrorResult(%+v)", *p)
}


type Second interface {
  Test(ctx context.Context) (_err error)
}

type SecondClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewSecondClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SecondClient {
  return &SecondClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSecondClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SecondClient {
  return &SecondClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSecondClient(c thrift.TClient) *SecondClient {
  return &SecondClient{
    c: c,
  }
}

func (p *SecondClient) Client_() thrift.TClient {
  return p.c
}

func (p *SecondClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *SecondClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

func (p *SecondClient) Test(ctx context.Context) (_err error) {
  var _args25 SecondTestArgs
  var _result27 SecondTestResult
  var _meta26 thrift.ResponseMeta
  _meta26, _err = p.Client_().Call(ctx, "Test", &_args25, &_result27)
  p.SetLastResponseMeta_(_meta26)
  if _err != nil {
    return
  }
  return nil
}

type SecondProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Second
}

func (p *SecondProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SecondProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SecondProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSecondProcessor(handler Second) *SecondProcessor {

  self28 := &SecondProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self28.processorMap["Test"] = &secondProcessorTest{handler:handler}
return self28
}

func (p *SecondProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x29 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x29.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x29

}

type secondProcessorTest struct {
  handler Second
}

func (p *secondProcessorTest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err30 error
  args := SecondTestArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Test", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SecondTestResult{}
  if err2 := p.handler.Test(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc31 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Test: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Test", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err30 = thrift.WrapTException(err2)
    }
    if err2 := _exc31.Write(ctx, oprot); _write_err30 == nil && err2 != nil {
      _write_err30 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err30 == nil && err2 != nil {
      _write_err30 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err30 == nil && err2 != nil {
      _write_err30 = thrift.WrapTException(err2)
    }
    if _write_err30 != nil {
      return false, thrift.WrapTException(_write_err30)
    }
    return true, err
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Test", thrift.REPLY, seqId); err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err30 == nil && err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err30 == nil && err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err30 == nil && err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if _write_err30 != nil {
    return false, thrift.WrapTException(_write_err30)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type SecondTestArgs struct {
}

func NewSecondTestArgs() *SecondTestArgs {
  return &SecondTestArgs{}
}

func (p *SecondTestArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondTestArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Test_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondTestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondTestArgs(%+v)", *p)
}

type SecondTestResult struct {
}

func NewSecondTestResult() *SecondTestResult {
  return &SecondTestResult{}
}

func (p *SecondTestResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondTestResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Test_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondTestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondTestResult(%+v)", *p)
}


